// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id         String       @id @default(cuid())
  email      String       @unique
  name       String?
  emailVerified   DateTime?
  isApproved Boolean      @default(false)
  isAdmin    Boolean      @default(false) // ‚Üê Add this
  Event      Event[]
  TeamMember TeamMember[]
  Resource   Resource[]
  Account    Account[]
  Session    Session[]
}

model Event {
  id          String   @id @default(cuid())
  title       String
  imageUrl    String
  description String
  location    String
  date        DateTime
  createdBy   User     @relation(fields: [createdById], references: [id])
  createdById String
  createdAt   DateTime @default(now())
}

model TeamMember {
  id        String @id @default(cuid())
  name      String
  role      String
  bio       String
  imageUrl  String
  addedBy   User   @relation(fields: [addedById], references: [id])
  addedById String
}

model Resource {
  id          String @id @default(cuid())
  title       String
  url         String
  description String
  addedBy     User   @relation(fields: [addedById], references: [id])
  addedById   String
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
